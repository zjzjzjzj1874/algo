package middle

// 73. 矩阵置零
// 给定一个 m x n 的矩阵，如果一个元素为 0 ，则将其所在行和列的所有元素都设为 0 。请使用 原地 算法。
//
// 示例 1：
//
// 输入：matrix = [[1,1,1],[1,0,1],[1,1,1]]
// 输出：[[1,0,1],[0,0,0],[1,0,1]]
// 示例 2：
//
// 输入：matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]
// 输出：[[0,0,0,0],[0,4,5,0],[0,3,1,0]]
//
// 提示：
//
// m == matrix.length
// n == matrix[0].length
// 1 <= m, n <= 200
// -231 <= matrix[i][j] <= 231 - 1
//
// 进阶：
//
// 一个直观的解决方案是使用  O(mn) 的额外空间，但这并不是一个好的解决方案。
// 一个简单的改进方案是使用 O(m + n) 的额外空间，但这仍然不是最好的解决方案。
// 你能想出一个仅使用常量空间的解决方案吗？

// 还是使用额外的变量记录数据
func setZeroes(matrix [][]int) {
	m := len(matrix)
	n := len(matrix[0])

	// 思路，有了之前的，现在可以使用额外的状态来记录了，最大2^31-1 => 那么可以使用2^32次方表示变换之后的值

	for i := 0; i < m; i++ {
		for j := 0; j < n; j++ {
			if matrix[i][j] != 0 {
				continue
			}

			// ==0时，处理行列的元素
			for k := 0; k < m; k++ {
				if matrix[k][j] != 0 {
					matrix[k][j] = 1 << 32
				}
			}
			for k := 0; k < n; k++ {
				if matrix[i][k] != 0 {
					matrix[i][k] = 1 << 32
				}
			}
		}
	}

	for i := 0; i < m; i++ {
		for j := 0; j < n; j++ {
			if matrix[i][j] == 1<<32 {
				matrix[i][j] = 0
			}
		}
	}
}
