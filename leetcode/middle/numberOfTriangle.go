package middle

// 3128. 直角三角形
// 给你一个二维 boolean 矩阵 grid 。
//
// 请你返回使用 grid 中的 3 个元素可以构建的 直角三角形 数目，且满足 3 个元素值 都 为 1 。
//
// 注意：
//
// 如果 grid 中 3 个元素满足：一个元素与另一个元素在 同一行，同时与第三个元素在 同一列 ，那么这 3 个元素称为一个 直角三角形 。这 3 个元素互相之间不需要相邻。
//
// 示例 1：
//
// 0	1	0
// 0	1	1
// 0	1	0
// 0	1	0
// 0	1	1
// 0	1	0
// 输入：grid = [[0,1,0],[0,1,1],[0,1,0]]
//
// 输出：2
//
// 解释：
//
// 有 2 个直角三角形。
//
// 示例 2：
//
// 1	0	0	0
// 0	1	0	1
// 1	0	0	0
// 输入：grid = [[1,0,0,0],[0,1,0,1],[1,0,0,0]]
//
// 输出：0
//
// 解释：
//
// 没有直角三角形。
//
// 示例 3：
//
// 1	0	1
// 1	0	0
// 1	0	0
// 1	0	1
// 1	0	0
// 1	0	0
// 输入：grid = [[1,0,1],[1,0,0],[1,0,0]]
//
// 输出：2
//
// 解释：
//
// 有两个直角三角形。
//
// 提示：
//
// 1 <= grid.length <= 1000
// 1 <= grid[i].length <= 1000
// 0 <= grid[i][j] <= 1

// 解题：归纳法：数量等于直角边的长度乘积(两边-直角点)
func numberOfRightTriangles(grid [][]int) int64 {
	// 归纳法：直角三角形的数量 = 直角横众坐标的1数量相乘，直角点除外
	n := len(grid[0])

	colSum := make([]int, n) // col前缀和, 每col有多少的1，即每列有多少个1
	for i := range grid {
		for j, col := range grid[i] {
			colSum[j] += col
		}
	}

	ans := int64(0)
	for _, row := range grid {
		// 行的1，提前把直角点的1减去
		sum := int64(-1)
		for _, col := range row {
			sum += int64(col)
		}
		for j, col := range row {
			if col == 1 { // 只有直角点是1的时候，才统计数量
				ans += sum * int64(colSum[j]-1)
			}
		}
	}

	return ans
}
